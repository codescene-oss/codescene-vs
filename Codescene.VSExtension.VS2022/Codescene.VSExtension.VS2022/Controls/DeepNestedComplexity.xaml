<UserControl x:Class="Codescene.VSExtension.VS2022.Controls.DeepNestedComplexity"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Codescene.VSExtension.VS2022.Controls"
             mc:Ignorable="d" 
             >
    <Grid HorizontalAlignment="Stretch">
        <ScrollViewer Margin="10" VerticalScrollBarVisibility="Auto" Foreground="{x:Static SystemColors.ControlLightBrush}">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="{x:Static SystemColors.ControlLightBrush}">
 <Image Source="/Codescene.VSExtension.VS2022;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-4"/>
 <Run Text="Deep Nested Complexity" FontWeight="Bold" FontSize="16"/>
 <LineBreak/>
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
            Deep nested complexity means that you have control structures like if-statements or loops inside other control structures.
                    <LineBreak />
                    Deeply nested complexity increases the cognitive load on the programmer reading the code.
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0,10,0,10">
            The human working memory has a maximum capacity of 3-4 items; beyond that threshold, we struggle with keeping things in our head.
                    <LineBreak />
                    Consequently, deeply nested complexity has a strong correlation to defects, and it accounts for roughly 20% of all programming mistakes.
                </TextBlock>

                <!-- Solution Section -->
                <TextBlock FontSize="16" FontWeight="Bold" Margin="0,10,0,5">
            Solution
                </TextBlock>

                <!-- Solution Details with Links -->
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
            Occasionally, it's possible to get rid of the nested logic with the 
            <Hyperlink TextDecorations="None" NavigateUri="https://refactoring.com/catalog/replaceNestedConditionalWithGuardClauses.html" RequestNavigate="Hyperlink_RequestNavigate">
                REPLACING CONDITIONALS WITH GUARD CLAUSES
            </Hyperlink> refactoring.
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
            Another viable strategy is to identify smaller building blocks inside the nested chunks of logic and extract those responsibilities into smaller, 
                    <LineBreak />
                    cohesive, and well-named functions. The 
            <Hyperlink TextDecorations="None" NavigateUri="https://refactoring.com/catalog/extractFunction.html" RequestNavigate="Hyperlink_RequestNavigate">
                EXTRACT FUNCTION
            </Hyperlink> refactoring explains the steps.
                </TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
