<UserControl x:Class="Codescene.VSExtension.VS2022.Controls.BumpyRoadAhead"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Codescene.VSExtension.VS2022.Controls"
             mc:Ignorable="d" 
            >
    <Grid HorizontalAlignment="Stretch">
        <ScrollViewer Margin="10" VerticalScrollBarVisibility="Auto" Foreground="{x:Static SystemColors.ControlLightBrush}">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" FontSize="12" Margin="10" Foreground="{x:Static SystemColors.ControlLightBrush}">
                <Image Source="/Codescene.VSExtension.VS2022;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-4"/>
                <Run Text="Bumpy Road Ahead" FontWeight="Bold" FontSize="16"/>
                <LineBreak/>
                </TextBlock>

                <TextBlock TextWrapping="Wrap">
                    <Run Text="The Bumpy Road code smell is a function that contains multiple chunks of nested conditional logic. Just like a bumpy road slows down your driving," />
                    <LineBreak />
                      <Run Text="a bumpy road in code presents an obstacle to comprehension. Fundamentally, a bumpy code road represents a lack of encapsulation which becomes" />
                </TextBlock>
                <TextBlock Text="an obstacle to comprehension. Worse, in imperative languages there’s also an increased risk for feature entanglement, which tends to lead to complex state management." TextWrapping="Wrap" />
                <TextBlock Text="Example" FontWeight="Bold" FontSize="16" Margin="0,10,0,0" />
                <TextBlock Text="Example 2" FontWeight="Bold" FontSize="14" Margin="0,5,0,0" />
                <TextBlock Text="Here is an example of code that uses multiple chunks of nested conditional logic:" TextWrapping="Wrap" />

                <!-- Code block example -->
                <TextBlock FontFamily="Consolas" FontSize="12" TextWrapping="Wrap" Margin="0,5,0,0">
                <Run Text="public class BumpyRoadExample {" />
                <LineBreak />
                <Run Text="    public void processDirectory(String path) {" />
                <LineBreak />
                <Run Text="        // Find all files matching &quot;data&lt;number&gt;.csv&quot;." />
                <LineBreak />
                <Run Text="        List&lt;String&gt; files = new ArrayList&lt;String&gt;();" />
                <LineBreak />
                <Run Text="        File dir = new File(path);" />
                <LineBreak />
                <Run Text="        for (File file : dir.listFiles()) {" />
                <LineBreak />
                <Run Text="            if (file.isFile() &amp;&amp; file.getName().matches(&quot;data\\d+\\.csv&quot;)) {" />
                <LineBreak />
                <Run Text="                files.add(file.getAbsolutePath());" />
                <LineBreak />
                <Run Text="            }" />
                <LineBreak />
                <Run Text="        }" />
                <LineBreak />
                <Run Text="        // Concatenate all the files into one" />
                <LineBreak />
                <Run Text="        StringBuilder sb = new StringBuilder();" />
                <LineBreak />
                <Run Text="        for (File file : files) {" />
                <LineBreak />
                <Run Text="            try (BufferedReader br = new BufferedReader(new FileReader(file))) {" />
                <LineBreak />
                <Run Text="                String line = br.readLine();" />
                <LineBreak />
                <Run Text="                while (line != null) {" />
                <LineBreak />
                <Run Text="                    sb.append(line);" />
                <LineBreak />
                <Run Text="                    line = br.readLine();" />
                <LineBreak />
                <Run Text="                }" />
                <LineBreak />
                <Run Text="            }" />
                <LineBreak />
                <Run Text="        }" />
                <LineBreak />
                <Run Text="        // Write the concatenated file to disk" />
                <LineBreak />
                <Run Text="        try (BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;data.csv&quot;))) {" />
                <LineBreak />
                <Run Text="            bw.write(sb.toString());" />
                <LineBreak />
                <Run Text="        }" />
                <LineBreak />
                <Run Text="    }" />
                <LineBreak />
                <Run Text="}" />
                </TextBlock>

                <TextBlock Text="When inspecting bumpy code roads, we follow a set of simple rules to classify the severity of the code smell:" Margin="10,10,0,0" TextWrapping="Wrap" />
                <StackPanel Margin="20,0,0,0">
                    <TextBlock Text="• The deeper the nested conditional logic of each bump, the higher the tax on our working memory." TextWrapping="Wrap" />
                    <TextBlock Text="• The more bumps we find, the more expensive it is to refactor as each bump represents a missing abstraction." TextWrapping="Wrap" />
                    <TextBlock Text="• The larger each bump – that is, the more lines of code it spans – the harder it is to build up a mental model of the function." TextWrapping="Wrap" />
                </StackPanel>
                <TextBlock Text="Solution" FontWeight="Bold" FontSize="16" Margin="0,10,0,0" />
                <TextBlock Text="Working with the previous example, and the idea that each bump might represent some missing abstraction, we can make an attempt at straightening out the code:" TextWrapping="Wrap" />

                <!-- Refactored code block example -->
                <TextBlock FontFamily="Consolas" FontSize="12" TextWrapping="Wrap" Margin="0,5,0,0">
                <Run Text="public class BumpyRoadExample {" />
                <LineBreak />
                <Run Text="    public void processDirectory(String path) {" />
                <LineBreak />
                <Run Text="        List&lt;String&gt; paths = FileUtils.findFiles(path, &quot;data\\d+\\.csv&quot;);" />
                <LineBreak />
                <Run Text="        String data = FileUtils.concatenateFiles(paths);" />
                <LineBreak />
                <Run Text="        // Write the concatenated file to disk" />
                <LineBreak />
                <Run Text="        try (BufferedWriter bw = new BufferedWriter(new FileWriter(&quot;data.csv&quot;))) {" />
                <LineBreak />
                <Run Text="            bw.write(data);" />
                <LineBreak />
                <Run Text="        }" />
                <LineBreak />
                <Run Text="    }" />
                <LineBreak />
                <Run Text="}" />
                </TextBlock>

                <TextBlock TextWrapping="Wrap" >
                    <Run Text="In this case we were able to express the bumps in terms of more general functions that we able to place elsewhere. This enables re-use and makes the code easier" />
                     <LineBreak />
                     <Run Text="to understand. We could even eliminate the comments as they now became superfluous." />
                </TextBlock>
               
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
