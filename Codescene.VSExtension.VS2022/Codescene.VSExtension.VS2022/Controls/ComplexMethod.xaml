<UserControl x:Class="Codescene.VSExtension.VS2022.Controls.ComplexMethod"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Codescene.VSExtension.VS2022.Controls"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="700"
             >
    <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
        <Grid HorizontalAlignment="Stretch" >
            <TextBlock TextWrapping="Wrap" FontSize="12" Margin="10" Foreground="{x:Static SystemColors.ControlLightBrush}">
         <Image Source="/Codescene.VSExtension.VS2022;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-4"/>
        <Run Text="Complex Method" FontWeight="Bold" FontSize="16"/>
         
        <LineBreak/>
            
              <TextBlock Text="A complex method is a function with a high cyclomatic complexity." TextWrapping="Wrap" />
                    <LineBreak/>
    <TextBlock Text="Cyclomatic complexity counts the number of logical paths through a function." TextWrapping="Wrap" />
              <LineBreak/>
                  <TextBlock Text="That is, each if-statement, each control structure like a for or while loop adds complexity." />
            <LineBreak/>
                        <TextBlock Text="We count them and sum it up to get a complexity value." TextWrapping="Wrap" />
  <LineBreak/>
    <TextBlock Text="It's somewhat of a crude metric, because whether or not the function is difficult to understand" />
  <LineBreak/>
                  <TextBlock Text="may depend on other factors as well, such as how deeply nested the code is." />
<LineBreak/>
    <TextBlock Text="Solution" FontWeight="Bold" FontSize="16" Margin="0,10,0,0" />
  <LineBreak/>
    <TextBlock Text="The solution heavily depends on specifics of the function." />
  <LineBreak/>
                  <TextBlock Text="Sometimes when the cyclomatic complexity gets too high, another design approach is beneficial such as" />
<LineBreak/>
    <StackPanel Margin="20,0,0,0">
        <TextBlock Text="• modeling state using an explicit state machine rather than conditionals, or" TextWrapping="Wrap" />
        <TextBlock Text="• using table lookup rather than long chains of logic." TextWrapping="Wrap" />
    </StackPanel>
  <LineBreak/>
    <TextBlock>
        In other scenarios, the function can be split using 
         <Hyperlink TextDecorations="None" Foreground="{x:Static SystemColors.ControlDarkBrush}" NavigateUri="https://refactoring.com/catalog/extractFunction.html" 
            RequestNavigate="Hyperlink_RequestNavigate">
     <Run Text="EXTRACT FUNCTION"/>
 </Hyperlink>
        . Just make sure you extract natural
        </TextBlock>
  <LineBreak/>
                <TextBlock Text="and cohesive functions. Complex Methods can also be addressed by identifying complex conditional" />
<LineBreak/>  
                                <TextBlock>
                                    expressions and then using the 
                                        <Hyperlink TextDecorations="None" Foreground="{x:Static SystemColors.ControlDarkBrush}" NavigateUri="https://refactoring.com/catalog/decomposeConditional.html" 
       RequestNavigate="Hyperlink_RequestNavigate">
<Run Text="DECOMPOSE CONDITIONAL"/>
                                            </Hyperlink>
                                   
                                    refactoring.
                                    </TextBlock>
<LineBreak/>  

            
        </TextBlock>
    </Grid>
    </ScrollViewer>

</UserControl>
