<UserControl x:Class="CodesceneReeinventTest.Controls.BrainMethod"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CodesceneReeinventTest.Controls"
             mc:Ignorable="d" 
             >
    <Grid HorizontalAlignment="Stretch">
        <ScrollViewer Margin="10" VerticalScrollBarVisibility="Auto" Foreground="{x:Static SystemColors.ControlLightBrush}">
            <StackPanel>
                <!-- Title -->
                <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="{x:Static SystemColors.ControlLightBrush}">
                <Image Source="/CodesceneReeinventTest;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-4"/>
                <Run Text="Brain Method" FontWeight="Bold" FontSize="16"/>
                <LineBreak/>    
                </TextBlock>
                <TextBlock FontSize="12" Margin="0,0,0,0">
            A <Italic>brain method</Italic> is a large and complex function that centralizes the behavior of the module.
                </TextBlock>

                <!-- Description -->
                <TextBlock Margin="0,10,0,10" TextWrapping="Wrap">
            Brain methods, as described in Object-Oriented Metrics in Practice, by Lanza and Marinescu, are 
                    <LineBreak />
                    detected using a combination of other code issues:
                </TextBlock>

                <!-- Bulleted List -->
                <StackPanel Margin="10,0">
                    <TextBlock Text="• Deeply nested Logic" />
                    <TextBlock Text="• High cyclomatic complexity" />
                    <TextBlock Text="• Many lines of code" />
                    <TextBlock Text="• Accesses many arguments" />
                </StackPanel>

                <!-- Problem Statement -->
                <TextBlock Margin="0,10,0,10" TextWrapping="Wrap">
            The more complex the brain method, the lower the code health.
                </TextBlock>

                <!-- Solution Section -->
                <TextBlock FontSize="14" FontWeight="Bold" Margin="0,10,0,5">
            Solution
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
            A brain method lacks modularity and violates the 
            <Hyperlink TextDecorations="None" NavigateUri="https://en.wikipedia.org/wiki/Single-responsibility_principle" RequestNavigate="Hyperlink_RequestNavigate">
                Single Responsibility Principle
            </Hyperlink>.
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
            Refactor by identifying the different responsibilities of the brain method and extract them 
                    <LineBreak />
                    into separate well-named and cohesive functions. Often, a brain method can - and should - be 
                    <LineBreak />
                    extracted to a new class that encapsulates the responsibilities and can be tested in isolation.
                </TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
