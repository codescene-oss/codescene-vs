<UserControl x:Class="CodesceneReeinventTest.Controls.ComplexConditional"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CodesceneReeinventTest.Controls"
             mc:Ignorable="d" 

             >
    <Grid>
        <ScrollViewer VerticalScrollBarVisibility="Auto" Foreground="{x:Static SystemColors.ControlLightBrush}">
            <StackPanel>
                <!-- Title -->
                <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="{x:Static SystemColors.ControlLightBrush}">
<Image Source="/CodesceneReeinventTest;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-6"/>
<Run Text="Complex Conditional" FontWeight="Bold" FontSize="16"/>
<LineBreak/>
                </TextBlock>

                <!-- Description -->
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,0">
                <Run Text="A complex conditional is an expression inside a branch such as an " />
                <Run Text="if" FontWeight="Bold" />
                <Run Text="-statement which consists of multiple logical operations." />
                               <LineBreak/>
                            <Run Text="Example: " />
                <Run FontFamily="Consolas" FontWeight="Bold" Text="if (x.started() &amp;&amp; y.running())" />
                <Run Text=". Complex conditionals make the code even harder to read, and contribute to the " />
                <Run FontWeight="Bold" Text="Complex method" />
                <Run Text=" code smell. "/>    <LineBreak/>
                <Run Text="Encapsulate them. By default, CodeScene warns only if there are at least 2 logical operators, but encapsulation can be valuable even with just one." />
                </TextBlock>

                <!-- Example Title -->
                <TextBlock FontSize="14" FontWeight="Bold" Margin="0,10,0,0" Text="Example" />

                <!-- Code Example -->
                <TextBlock FontFamily="Consolas" FontSize="14" TextWrapping="Wrap" Padding="10" Margin="0,5,0,0">
            <Run Text="function messageReceived(message, timeReceived) {" />
            <LineBreak />
            <Run Text="   // Ignore all messages which aren't from known customers:" />
            <LineBreak />
            <Run Text="   if (!message.sender &amp;&amp;" />
            <LineBreak />
            <Run Text="       customers.getId(message.name) == null) {" />
            <LineBreak />
            <Run Text="     log('spam received -- ignoring');" />
            <LineBreak />
            <Run Text="     return;" />
            <LineBreak />
            <Run Text="   }" />
            <LineBreak />
            <LineBreak />
            <Run Text="  // Provide an auto-reply when outside business hours:" />
            <LineBreak />
            <Run Text="  if ((timeReceived.getHours() > 17) ||" />
            <LineBreak />
            <Run Text="      (timeReceived.getHours() &lt; 8 ||" />
            <LineBreak />
            <Run Text="      (timeReceived.getDay() == Days.SUNDAY))) {" />
            <LineBreak />
            <Run Text="    return autoReplyTo(message);" />
            <LineBreak />
            <Run Text="  }" />
            <LineBreak />
            <LineBreak />
            <Run Text="  pingAgentFor(message);" />
            <LineBreak />
            <Run Text="}" />
                    </TextBlock>

                    <!-- Solution Title -->
                    <TextBlock FontSize="14" FontWeight="Bold" Margin="0,10,0,0" Text="Solution" />

                    <!-- Solution Description -->
                    <TextBlock TextWrapping="Wrap" Margin="0,5,0,0">
            <Run Text="Apply the " />
            <Run Text="DECOMPOSE CONDITIONAL" FontWeight="Bold" />
            <Run Text=" refactoring so that the complex conditional is encapsulated in a separate function with a good name that captures the business rule." />
                           <LineBreak/>
                <Run Text="Optionally, for simple expressions, introduce a new variable which holds the result of the complex conditional." />
                    </TextBlock>

                    <!-- Solution Code Example -->
                    <TextBlock FontFamily="Consolas" FontSize="14" TextWrapping="Wrap" Padding="10" Margin="0,5,0,0">
            <Run Text="function messageReceived(message, timeReceived) {" />
            <LineBreak />
            <Run Text="   if (!fromKnownCustomer(message)) {" />
            <LineBreak />
            <Run Text="     log('spam received -- ignoring');" />
            <LineBreak />
            <Run Text="     return;" />
            <LineBreak />
            <Run Text="   }" />
            <LineBreak />
            <LineBreak />
            <Run Text="  if (outsideBusinessHours(timeReceived)) {" />
            <LineBreak />
            <Run Text="    return autoReplyTo(message);" />
            <LineBreak />
            <Run Text="  }" />
            <LineBreak />
            <LineBreak />
            <Run Text="  pingAgentFor(message);" />
            <LineBreak />
            <Run Text="}" />
                    </TextBlock>

                    <!-- Final Note -->
                    <TextBlock TextWrapping="Wrap" Margin="0,5,0,0">
            <Run Text="For brevity, the separate functions are omitted. Note also how the clear naming omits the need for extra comments." />   
                </TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
