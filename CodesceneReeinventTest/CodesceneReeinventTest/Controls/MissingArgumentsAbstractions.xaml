<UserControl x:Class="CodesceneReeinventTest.Controls.MissingArgumentsAbstractions"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CodesceneReeinventTest.Controls"
             mc:Ignorable="d" 
             >
    <Grid HorizontalAlignment="Stretch">
        <ScrollViewer Margin="10" VerticalScrollBarVisibility="Auto" Foreground="{x:Static SystemColors.ControlLightBrush}">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="{x:Static SystemColors.ControlLightBrush}">
                    <Image Source="/CodesceneReeinventTest;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-4"/>
                    <Run Text="Missing Arguments Abstractions" FontWeight="Bold" FontSize="16"/>
                    <LineBreak/>
                </TextBlock>

                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    The functions in this file have too many arguments, indicating a lack of encapsulation or too many 
                    <LineBreak />
                    responsibilities in the same functions. Avoid adding more.
                </TextBlock>

                <!-- Explanation -->
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    This code health issue is measured as the average number of function arguments across the whole file. 
                    <LineBreak />
                    A function with many arguments can be simplified either by:
                </TextBlock>

                <StackPanel Margin="0,0,0,10">
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">- Splitting the function if it has too many responsibilities, or</TextBlock>
                    <TextBlock TextWrapping="Wrap">- Introducing an abstraction (class, record, struct, etc.) which encapsulates the arguments.</TextBlock>
                </StackPanel>

                <!-- Solution -->
                <TextBlock TextWrapping="Wrap" FontWeight="Bold" Margin="0,0,0,10">
    Solution
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    Start by investigating the responsibilities of the function. Make sure it doesn't do too many things, 
                    <LineBreak />
                    in which case it should be split into smaller and more cohesive functions. 
                    <LineBreak />
                    Consider the refactoring 
    <Hyperlink TextDecorations="None" NavigateUri="https://refactoring.com/catalog/introduceParameterObject.html" RequestNavigate="Hyperlink_RequestNavigate">INTRODUCE PARAMETER OBJECT</Hyperlink> to encapsulate arguments that refer to the same logical concept.
                </TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
