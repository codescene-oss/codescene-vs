<UserControl x:Class="CodesceneReeinventTest.Controls.OverallCodeComplexity"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CodesceneReeinventTest.Controls"
             mc:Ignorable="d" 
             >
    <Grid HorizontalAlignment="Stretch">
        <ScrollViewer Margin="10" VerticalScrollBarVisibility="Auto" Foreground="{x:Static SystemColors.ControlLightBrush}">
            <StackPanel>
                <TextBlock TextWrapping="Wrap" FontSize="12" Foreground="{x:Static SystemColors.ControlLightBrush}">
                    <Image Source="/CodesceneReeinventTest;component/Resources/cs-logo.png" Width="22" Height="22" Margin="0,0,0,-4"/>
                    <Run Text="Overall Code Complexity" FontWeight="Bold" FontSize="16"/>
                    <LineBreak/>
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    This file has many conditional statements (e.g. if, for, while) across its implementation, leading to lower code health. Avoid adding more conditionals.
                </TextBlock>

                <!-- Explanation -->
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    Code complexity is detected by the <Hyperlink TextDecorations="None" NavigateUri="https://en.wikipedia.org/wiki/Cyclomatic_complexity" RequestNavigate="Hyperlink_RequestNavigate">cyclomatic complexity</Hyperlink> metric, which counts the number of conditional statements. 
                    <LineBreak />
                    Cyclomatic complexity indicates the minimum number of unit tests you would need for the implementation in this file. 
                    <LineBreak />
                    The more tests you need, the more complicated the method. This code smell indicates that the whole implementation would benefit from being simplified.
                </TextBlock>

                <!-- Solution -->
                <TextBlock TextWrapping="Wrap" FontWeight="Bold" Margin="0,0,0,10">
    Solution
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    Start by addressing possible bumpy road and/or deeply nested logic issues if applicable. This will help you lower the average cyclomatic complexity too.
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    You can then address the overall cyclomatic complexity by:
                </TextBlock>
                <StackPanel Margin="0,0,0,10">
                    <TextBlock TextWrapping="Wrap" Margin="0,0,0,5">
        a) modularizing the code, and
                
        b) abstract away the complexity. Let's look at some examples:
                    </TextBlock>
                </StackPanel>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    • <TextBlock>Modularizing the Code:</TextBlock> Do an X-Ray and inspect the local hotspots. Are there any complex conditional expressions? 
                    <LineBreak />
                    If yes, then do a <Hyperlink NavigateUri="https://refactoring.com/catalog/decomposeConditional.html" TextDecorations="None" RequestNavigate="Hyperlink_RequestNavigate">DECOMPOSE CONDITIONAL</Hyperlink> refactoring. Extract the conditional logic into a separate function and put a good name on that function. 
                    <LineBreak />
                    This clarifies the intent and makes the original function easier to read. Repeat until all complex conditional expressions have been simplified.
</TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    • In an object-oriented language, conditionals can often be replaced with polymorphic calls (see the design patterns <Hyperlink TextDecorations="None" NavigateUri="https://en.wikipedia.org/wiki/Strategy_pattern" RequestNavigate="Hyperlink_RequestNavigate">STRATEGY</Hyperlink> and <Hyperlink TextDecorations="None" NavigateUri="https://en.wikipedia.org/wiki/Command_pattern" RequestNavigate="Hyperlink_RequestNavigate">COMMAND</Hyperlink> -- they often help).
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    • In a functional programming language, conditionals can often be replaced by pipes of filter, remove, reduce, etc.
                </TextBlock>
                <TextBlock TextWrapping="Wrap" Margin="0,0,0,10">
    • You also want to inspect the code and see if it seems to do more than one thing. If yes, then consider the <Hyperlink TextDecorations="None" NavigateUri="https://refactoring.com/catalog/extractFunction.html" RequestNavigate="Hyperlink_RequestNavigate">EXTRACT FUNCTION</Hyperlink> refactoring.
                </TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</UserControl>
